        const mineflayer = require("mineflayer");
        const config = require("../config/config");
        const logger = require("../utils/logger");

        class MinecraftHandler {
            constructor(mainBot) {
                // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ r√µ r√†ng h∆°n: mainBot l√† instance c·ªßa AternosBot
                this.mainBot = mainBot;
                this.activityTimer = null;
                this.lastActivity = Date.now();
            }

            async connect() {
                const botOptions = {
                    host: config.minecraft.serverAddress,
                    port: config.minecraft.serverPort,
                    username: config.minecraft.username,
                    version: config.minecraft.version,
                    auth: config.minecraft.auth, // S·ª≠ d·ª•ng c·∫•u h√¨nh auth t·ª´ config
                };

                // mineflayer s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω password n·∫øu auth l√† 'microsoft' v√† password ƒë∆∞·ª£c cung c·∫•p.
                // Kh√¥ng c·∫ßn th√™m ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát cho 'offline' mode.
                if (
                    config.minecraft.password &&
                    config.minecraft.auth === "microsoft"
                ) {
                    botOptions.password = config.minecraft.password;
                }

                logger.info(
                    `ƒêang k·∫øt n·ªëi ƒë·∫øn ${config.minecraft.serverAddress}:${config.minecraft.serverPort} v·ªõi username: ${config.minecraft.username} (Auth: ${config.minecraft.auth})`,
                );

                const bot = mineflayer.createBot(botOptions);

                return new Promise((resolve, reject) => {
                    const timeout = setTimeout(() => {
                        bot.end("Timeout"); // K·∫øt th√∫c bot ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n
                        reject(new Error("Timeout khi k·∫øt n·ªëi Minecraft"));
                    }, 30000); // 30 gi√¢y timeout

                    bot.once("spawn", () => {
                        clearTimeout(timeout);
                        logger.info("Bot ƒë√£ spawn th√†nh c√¥ng trong game!");
                        this.setupBotEvents(bot);
                        this.startActivityLoop(bot);
                        this.mainBot.discordHandler.setMinecraftBot(bot); // C·∫≠p nh·∫≠t instance bot cho discordHandler
                        resolve(bot);
                    });

                    bot.once("error", (error) => {
                        clearTimeout(timeout);
                        logger.error("L·ªói Minecraft bot:", error);
                        // In ra l·ªói khi ch∆∞a join ƒë∆∞·ª£c v√†o world
                        console.log(`[MC JOIN ERROR] ${error?.message || error}`);
                        logger.info(`[MC JOIN ERROR] ${error?.message || error}`);
                        reject(error);
                    });

                    bot.once("kicked", (reason, loggedIn) => {
                        clearTimeout(timeout);
                        // In ra l√Ω do b·ªã kick khi ch∆∞a join ƒë∆∞·ª£c v√†o world
                        console.log(`[MC KICKED BEFORE JOIN] ${reason}`);
                        logger.info(`[MC KICKED BEFORE JOIN] ${reason}`);
                        reject(new Error(`Kicked before join: ${reason}`));
                    });

                    bot.once("end", (reason) => {
                        clearTimeout(timeout);
                        logger.warn("K·∫øt n·ªëi Minecraft ƒë√£ k·∫øt th√∫c:", reason);
                        // In ra l√Ω do end khi ch∆∞a join ƒë∆∞·ª£c v√†o world
                        console.log(`[MC END BEFORE JOIN] ${reason}`);
                        logger.info(`[MC END BEFORE JOIN] ${reason}`);
                        reject(new Error(`Minecraft bot ended: ${reason}`)); // ƒê·∫©y l·ªói ƒë·ªÉ AternosBot x·ª≠ l√Ω reconnect
                    });
                });
            }

            setupBotEvents(bot) {
                // X·ª≠ l√Ω tin nh·∫Øn chat
                bot.on("chat", (username, message) => {
                    if (username === bot.username) return; // B·ªè qua tin nh·∫Øn c·ªßa ch√≠nh bot

                    logger.info(`[MC Chat] ${username}: ${message}`);

                    // Relay chat ƒë·∫øn Discord
                    if (config.bot.chatRelayEnabled) {
                        // G·ªçi sendChatMessage t·ª´ discordHandler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o trong mainBot
                        this.mainBot.discordHandler.sendChatMessage(username, message);
                    }

                    // X·ª≠ l√Ω l·ªánh teleport
                    if (
                        config.bot.teleportEnabled &&
                        message.startsWith(config.bot.teleportPrefix)
                    ) {
                        this.handleTeleportCommand(bot, username, message);
                    }
                });

                // X·ª≠ l√Ω ng∆∞·ªùi ch∆°i join/leave
                bot.on("playerJoined", (player) => {
                    logger.info(`Ng∆∞·ªùi ch∆°i ${player.username} ƒë√£ tham gia server`);
                    // Truy·ªÅn th√¥ng tin ƒë·∫ßy ƒë·ªß h∆°n cho Embed
                    this.mainBot.discordHandler.sendStatusMessage(
                        `üì• Ng∆∞·ªùi ch∆°i ƒë√£ tham gia`,
                        `**${player.username}** ƒë√£ tham gia server.`,
                        "#2ECC71", // M√†u xanh l√°
                    );
                });

                bot.on("playerLeft", (player) => {
                    logger.info(`Ng∆∞·ªùi ch∆°i ${player.username} ƒë√£ r·ªùi server`);
                    // Truy·ªÅn th√¥ng tin ƒë·∫ßy ƒë·ªß h∆°n cho Embed
                    this.mainBot.discordHandler.sendStatusMessage(
                        `üì§ Ng∆∞·ªùi ch∆°i ƒë√£ r·ªùi ƒëi`,
                        `**${player.username}** ƒë√£ r·ªùi server.`,
                        "#E74C3C", // M√†u ƒë·ªè
                    );
                });

                // X·ª≠ l√Ω tin nh·∫Øn h·ªá th·ªëng
                bot.on("message", (jsonMsg) => {
                    // L·∫•y text t·ª´ jsonMsg m·ªôt c√°ch an to√†n
                    let plainText;
                    if (typeof jsonMsg === 'string') {
                        plainText = jsonMsg;
                    } else if (jsonMsg && typeof jsonMsg.toString === 'function') {
                        plainText = jsonMsg.toString();
                    } else {
                        plainText = JSON.stringify(jsonMsg);
                    }

                    // In ra m·ªçi respond t·ª´ server
                    console.log(`[MC RESPOND] ${plainText}`);
                    logger.info(`[MC RESPOND] ${plainText}`);

                    // L·ªçc c√°c tin nh·∫Øn quan tr·ªçng t·ª´ server
                    if (
                        plainText.includes("Server") ||
                        plainText.includes("Restart") ||
                        plainText.includes("Shutdown")
                    ) {
                        logger.info(`[Server Message] ${plainText}`);
                        this.mainBot.discordHandler.sendStatusMessage(
                            `üñ•Ô∏è Th√¥ng B√°o Server`,
                            `**Server:** ${plainText}`,
                            "#F1C40F", // M√†u v√†ng c·∫£nh b√°o
                        );
                    }
                });

                // X·ª≠ l√Ω l·ªói
                bot.on("error", (error) => {
                    logger.error("Minecraft bot error:", error);
                    this.mainBot.discordHandler.sendStatusMessage(
                        `‚ùó L·ªói Minecraft Bot`,
                        `Bot g·∫∑p l·ªói: \`\`\`${error.message}\`\`\``,
                        "#E74C3C", // ƒê·ªè
                    );
                });

                // X·ª≠ l√Ω kick
                bot.on("kicked", (reason) => {
                    logger.warn("Bot b·ªã kick:", reason);
                    this.mainBot.discordHandler.sendStatusMessage(
                        `‚ö†Ô∏è Bot b·ªã kick kh·ªèi server`,
                        `L√Ω do: \`\`\`${reason}\`\`\``,
                        "#FF9900", // Cam
                    );
                });

                // X·ª≠ l√Ω death
                bot.on("death", () => {
                    logger.info("Bot ƒë√£ ch·∫øt, s·∫Ω respawn");
                    this.mainBot.discordHandler.sendStatusMessage(
                        `üíÄ Bot ƒë√£ ch·∫øt`,
                        `Bot ƒë√£ ch·∫øt v√† s·∫Ω respawn.`,
                        "#9B59B6", // T√≠m
                    );
                    setTimeout(() => {
                        if (bot.game && bot.game.dimension) {
                            bot.respawn();
                        }
                    }, 2000);
                });
            }

            handleTeleportCommand(bot, username, message) {
                try {
                    const args = message.trim().split(" ");

                    if (args.length < 2) {
                        bot.chat(
                            `${username}, c√∫ ph√°p: ${config.bot.teleportPrefix} <t√™n_ng∆∞·ªùi_ch∆°i>`,
                        );
                        return;
                    }

                    const targetPlayer = args[1];

                    // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≥ online kh√¥ng
                    const players = bot.players;
                    const targetExists = Object.keys(players).find(
                        (name) => name.toLowerCase() === targetPlayer.toLowerCase(),
                    );

                    if (!targetExists) {
                        bot.chat(
                            `${username}, kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i: ${targetPlayer}`,
                        );
                        logger.info(
                            `Teleport failed: Player ${targetPlayer} not found`,
                        );
                        this.mainBot.discordHandler.sendStatusMessage(
                            `‚ùå L·ªánh teleport th·∫•t b·∫°i`,
                            `Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i **${targetPlayer}** trong game.`,
                            "#E74C3C", // ƒê·ªè
                        );
                        return;
                    }

                    // Th·ª±c hi·ªán l·ªánh teleport
                    // L∆∞u √Ω: L·ªánh /teleport y√™u c·∫ßu quy·ªÅn OP tr√™n server.
                    // Bot s·∫Ω g·ª≠i l·ªánh n√†y nh∆∞ chat b√¨nh th∆∞·ªùng, n·∫øu kh√¥ng c√≥ OP s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.
                    const teleportCommand = `/teleport ${username} ${targetExists}`;
                    bot.chat(teleportCommand);

                    logger.info(`Teleport command executed: ${teleportCommand}`);
                    this.mainBot.discordHandler.sendStatusMessage(
                        `‚úÖ ƒê√£ th·ª±c hi·ªán l·ªánh teleport`,
                        `**${username}** ƒë√£ ƒë∆∞·ª£c teleport ƒë·∫øn **${targetExists}**. (Y√™u c·∫ßu bot c√≥ OP)`,
                        "#2ECC71", // Xanh l√°
                    );
                } catch (error) {
                    logger.error("L·ªói khi x·ª≠ l√Ω l·ªánh teleport:", error);
                    this.mainBot.discordHandler.sendStatusMessage(
                        `‚ùå L·ªói khi th·ª±c hi·ªán l·ªánh teleport`,
                        `C√≥ l·ªói x·∫£y ra: \`\`\`${error.message}\`\`\``,
                        "#E74C3C", // ƒê·ªè
                    );
                }
            }

            startActivityLoop(bot) {
                // D·ª´ng timer c≈© n·∫øu c√≥
                if (this.activityTimer) {
                    clearInterval(this.activityTimer);
                }

                this.activityTimer = setInterval(() => {
                    this.simulateActivity(bot);
                }, config.bot.activityInterval);

                logger.info(
                    `ƒê√£ b·∫Øt ƒë·∫ßu activity loop v·ªõi interval ${config.bot.activityInterval}ms`,
                );
            }

            simulateActivity(bot) {
                if (!bot || !bot.entity || !bot.entity.position) {
                    logger.debug(
                        "Cannot simulate activity: bot or bot.entity or bot.entity.position is null",
                    );
                    return;
                }

                try {
                    const activities = [
                        () => {
                            // Xoay camera ng·∫´u nhi√™n
                            const yaw = (Math.random() - 0.5) * Math.PI * 2; // Full circle
                            const pitch = ((Math.random() - 0.5) * Math.PI) / 2; // Up/down limited
                            bot.look(yaw, pitch);
                            logger.debug("Simulated camera rotation");
                        },
                        () => {
                            // Nh·∫£y ng·∫´u nhi√™n
                            if (bot.entity.onGround) {
                                bot.setControlState("jump", true);
                                setTimeout(
                                    () => bot.setControlState("jump", false),
                                    100,
                                );
                                logger.debug("Simulated jump");
                            }
                        },
                        () => {
                            // Di chuy·ªÉn nh·∫π (forward/backward/left/right)
                            const directions = ["forward", "back", "left", "right"];
                            const direction =
                                directions[
                                    Math.floor(Math.random() * directions.length)
                                ];
                            bot.setControlState(direction, true);
                            setTimeout(
                                () => bot.setControlState(direction, false),
                                500,
                            );
                            logger.debug(`Simulated movement: ${direction}`);
                        },
                        () => {
                            // Swing arm
                            bot.swingArm("right");
                            logger.debug("Simulated arm swing");
                        },
                    ];

                    // Ch·ªçn ng·∫´u nhi√™n 1-2 ho·∫°t ƒë·ªông
                    const numActivities = Math.floor(Math.random() * 2) + 1;
                    for (let i = 0; i < numActivities; i++) {
                        const activity =
                            activities[Math.floor(Math.random() * activities.length)];
                        activity();
                    }

                    this.lastActivity = Date.now();
                } catch (error) {
                    logger.error("L·ªói khi m√¥ ph·ªèng ho·∫°t ƒë·ªông:", error);
                }
            }

            // handleDisconnect s·∫Ω kh√¥ng ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp ·ªü ƒë√¢y n·ªØa m√† ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi AternosBot
            // handleDisconnect(reason) {
            //     logger.warn('Minecraft bot ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi:', reason);
            //     if (this.activityTimer) {
            //         clearInterval(this.activityTimer);
            //         this.activityTimer = null;
            //     }
            //     this.mainBot.isMinecraftConnected = false;
            //     this.mainBot.discordHandler.sendStatusMessage(`üîå Bot ƒë√£ m·∫•t k·∫øt n·ªëi kh·ªèi server Minecraft: ${reason}`);
            //     setTimeout(() => {
            //         this.mainBot.handleMinecraftReconnect();
            //     }, 5000);
            // }

            cleanup() {
                if (this.activityTimer) {
                    clearInterval(this.activityTimer);
                    this.activityTimer = null;
                }
            }
        }

        module.exports = MinecraftHandler;
